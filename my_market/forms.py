import flask_wtfimport wtformsfrom wtforms import ValidationError, validators as validfrom my_market.models import Userclass Signup(flask_wtf.FlaskForm):    username         = wtforms.StringField("Username", validators=[valid.DataRequired(message="Username can't be empty")])    email            = wtforms.StringField("Email", validators=[valid.DataRequired(), valid.Email()])    password         = wtforms.PasswordField("Password", validators=[valid.DataRequired()])    password_confirm = wtforms.PasswordField("Confirm password", validators=[valid.DataRequired(), valid.EqualTo('password')])    age              = wtforms.IntegerField("Age", validators=[valid.DataRequired(message="Age can't be empty")])    city             = wtforms.StringField("City", validators=[])    cart             = []    submit           = wtforms.SubmitField("Sign up")class SignIn(flask_wtf.FlaskForm):    username   = wtforms.StringField("Username", validators=[valid.DataRequired(message="Username can't be empty")])    password   = wtforms.PasswordField("Password", validators=[valid.DataRequired()])    submit     = wtforms.SubmitField("Sign In")class OrderForm(flask_wtf.FlaskForm):    fullname  = wtforms.StringField("Fullname", validators=[valid.DataRequired(message="Username can't be empty")])    email     = wtforms.StringField("Email", validators=[valid.DataRequired(), valid.Email()])    phone     = wtforms.IntegerField("Phone", validators=[valid.DataRequired()])    address   = wtforms.StringField("Full Address", validators=[valid.DataRequired()])    submit    = wtforms.SubmitField("Buy")class ResetAddres(flask_wtf.FlaskForm):    fullname  = wtforms.StringField("Fullname", validators=[valid.DataRequired(message="Username can't be empty")])    email     = wtforms.StringField("Email", validators=[valid.DataRequired(), valid.Email()])    phone     = wtforms.IntegerField("Phone", validators=[valid.DataRequired()])    address   = wtforms.StringField("Full Address", validators=[valid.DataRequired()])    submit    = wtforms.SubmitField("Reset Address")class ResetRequestForm(flask_wtf.FlaskForm):    email     = wtforms.StringField("Email", validators=[valid.DataRequired(), valid.Email()])    submit = wtforms.SubmitField("Reset Request")    def validate_email(self, email):        user = User.query.filter_by(email=email.data).first()        if user is None:            raise ValidationError("You need to register First")class ResetPasswordForm(flask_wtf.FlaskForm):    password         = wtforms.PasswordField("Password", validators=[valid.DataRequired()])    password_confirm = wtforms.PasswordField("Confirm password", validators=[valid.DataRequired(), valid.EqualTo('password')])    submit = wtforms.SubmitField("Reset Password")class ContactAs(flask_wtf.FlaskForm):    username         = wtforms.StringField("Username", validators=[valid.DataRequired(message="Username can't be empty")])    email            = wtforms.StringField("Email", validators=[valid.DataRequired(), valid.Email()])    subject          = wtforms.StringField("Subject", validators=[valid.DataRequired()])    message          = wtforms.TextAreaField("Your Message", validators=[valid.DataRequired()])    submit           = wtforms.SubmitField("Contact Us")