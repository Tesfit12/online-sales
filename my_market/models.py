from my_market import db, login_mngr, appfrom werkzeug import securityimport flask_loginimport datetimeimport refrom datetime import datetimefrom itsdangerous import TimedJSONWebSignatureSerializer as Serializerclass Product(db.Model):    id          = db.Column(db.String, primary_key=True)    name        = db.Column(db.String)    pic_url     = db.Column(db.String)    category    = db.Column(db.String)    description = db.Column(db.String)    price       = db.Column(db.Integer)    quantity      = db.Column(db.Integer)    status        = db.Column(db.String)    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)    all_user_stuff = db.relationship('UserStaff', backref='owner_stuff')@login_mngr.user_loaderdef load_user(user_id):    return User.query.get(int(user_id))# i tried to create an obj in the populate.py file instead of [Product] [User] it doesn't give cuz of flask_login.UserMixin# meaning i think u need to loging firstclass User(flask_login.UserMixin, db.Model):    id         = db.Column(db.Integer(), primary_key=True)    name       = db.Column(db.String(64))    age        = db.Column(db.Integer, default=0)    email      = db.Column(db.String(512))    city       = db.Column(db.String(64))    pwd_hash   = db.Column(db.String(254))    cart       = []    userstuffs = db.relationship('UserStaff', backref='owner')    def get_reset_token(self, expier_time=999880000):        s = Serializer(app.config['SECRET_KEY'], expier_time)        return s.dumps({'user_id': self.id}).decode('utf-8')    @staticmethod    def verify_reset_token(token):        s = Serializer(app.config['SECRET_KEY'])        try:            user_id = s.loads(token)['user_id']        except:            return None        return User.query.get(user_id)    def add_password(self, password):        self.pwd_hash = security.generate_password_hash(password)    def check_password(self, password):        return security.check_password_hash(self.pwd_hash, password)    def add_to_db(self):        self.name = self.name.title()        db.session.add(self)        db.session.commit()    @classmethod    def check_signin(cls, username, password):        username = username.title()        # Retrieve user        user = cls.query.filter_by(name=username).first()        if not user:            return False        # Checking his password        if user.check_password(password):            return user        return False    def __repr__(self):        return "<User {} {} >".format(self.name, self.cart)class UserStaff(flask_login.UserMixin, db.Model):    id        = db.Column(db.Integer, primary_key=True)    name      = db.Column(db.String(64))    email     = db.Column(db.String(512))    phone     = db.Column(db.Integer)    address   = db.Column(db.String(254))    product_name = db.Column(db.String(98))    product_price = db.Column(db.Integer)    product_pic  = db.Column(db.String())    user_id   = db.Column(db.Integer, db.ForeignKey('user.id'))    product_id = db.Column(db.Integer, db.ForeignKey('product.id'))